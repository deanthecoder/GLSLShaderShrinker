<Grid x:Class="Shrinker.WpfApp.OptionsDialog"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      xmlns:WpfApp="clr-namespace:Shrinker.WpfApp"
      xmlns:MdXaml="clr-namespace:MdXaml;assembly=MdXaml"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      d:DataContext="{d:DesignInstance WpfApp:AppViewModel}">
    <Grid.Resources>
        <Style TargetType="CheckBox" BasedOn="{StaticResource MaterialDesignCheckBox}">
            <Setter Property="Margin" Value="0,4" />
            <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        </Style>

        <Style TargetType="MdXaml:MarkdownScrollViewer">
            <Setter Property="VerticalScrollBarVisibility" Value="Hidden" />
        </Style>
    </Grid.Resources>

    <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="Auto"/>
    </Grid.RowDefinitions>

    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="0.5*"/>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="0.5*"/>
    </Grid.ColumnDefinitions>

    <StackPanel Grid.Row="0" Grid.Column="0">
        <CheckBox x:Name="removeCommentsCheck" Content="Remove comments" IsChecked="{Binding CustomOptions.RemoveComments}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Remove Comments
                    Remove all C/C++ -style comments from the code.
                    #### Before
                    ```c
                    // This comment will be removed.
                    int myFunc(vec3 p) { return 1; }
                    ```
                    #### After
                    ```c
                    int myFunc(vec3 p) { return 1; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Keep header comments" IsChecked="{Binding CustomOptions.KeepHeaderComments}" Margin="16,4" IsEnabled="{Binding IsChecked, ElementName=removeCommentsCheck}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Keep Header Comments
                    Keep the top-most comments in the code, even when removing all others.
                    #### Before
                    ```c
                    // 'My Shader' written Me.
                    // This comment will stay.
                    int aGlobal = 2;

                    // This comment will be removed.
                    int myFunc(vec3 p) { return 1; }
                    ```
                    #### After
                    ```c
                    // 'My Shader' written Me.
                    // This comment will stay.
                    int aGlobal = 2;

                    int myFunc(vec3 p) { return 1; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Remove unused functions" IsChecked="{Binding CustomOptions.RemoveUnusedFunctions}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Remove Unused Functions
                    Remove any functions that are not called within the code.

                    **Note:** Only active if a `main...()` function is defined.
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Remove unused variables" IsChecked="{Binding CustomOptions.RemoveUnusedVariables}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Remove Unused Variables
                    Remove any global or local variables not used within the code.
                    #### Before
                    ```c
                    int myFunc() {
                        int unused = 2; // &lt;-This will be removed.
                        return 1;
                    }
                    ```
                    #### After
                    ```c
                    int myFunc(vec3 p) { return 1; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Remove unreachable code" IsChecked="{Binding CustomOptions.RemoveUnreachableCode}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Remove Unreachable Code
                    Remove any code which cannot be reached.
                    #### Before
                    ```c
                    float myFunc(vec3 p) {
                        return p.x + p.y - p.z;

                        // This code cannot be reached.
                        a *= 2;
                    }
                    ```
                    #### After
                    ```c
                    float myFunc(vec3 p) {
                        return p.x + p.y - p.z;
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Remove disabled code" IsChecked="{Binding CustomOptions.RemoveDisabledCode}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Remove Disabled Code
                    Remove any commented-out code, or code surrounded with `#if 0...#endif`.
                    #### Before
                    ```c
                    #if 1
                    float myFunc(vec3 p) { return p.x + p.y - p.z; }
                    #else
                    float myFunc(vec3 p) { return 3.141; }
                    #endif
                    ```
                    #### After
                    ```c
                    float myFunc(vec3 p) { return p.x + p.y - p.z; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Simplify function declarations" IsChecked="{Binding CustomOptions.SimplifyFunctionDeclarations}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Simplify Function Declarations
                    * Removes function declarations with no matching definition.
                    * Removes declarations where the matching definition is early enough to be used by all its callers.
                    * Removes declaration parameter names.

                    #### Before
                    ```c
                    // Declare a function.
                    float sum(float value1, float value2);

                    // Define the function.
                    float sum(float value1, float value2) { return value1 + value2; }

                    // Use the function.
                    void main() { myFunc(1, 2); }
                    ```
                    #### After
                    ```c
                    // Define the function.
                    float sum(float value1, float value2) { return value1 + value2; }

                    // Use the function.
                    void main() { myFunc(1, 2); }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Simplify function parameters" IsChecked="{Binding CustomOptions.SimplifyFunctionParams}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Simplify Function Parameters
                    * Removes `void` parameters.
                    * Removes `in` keywords (which is the default in GLSL).

                    #### Before
                    ```c
                    float myFunc(void) { return 3.141; }
                    float sum(in float a, in float b) { return a + b; }
                    ```
                    #### After
                    ```c
                    float myFunc() { return 3.141; }
                    float sum(float a, float b) { return a + b; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Group variable declarations" IsChecked="{Binding CustomOptions.GroupVariableDeclarations}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Group Variable Declarations
                    * Merge multiple declarations of the same variable type (when it makes sense to do so).
                    * Applies to global variables, local variables, and fields in a `struct`.

                    #### Before
                    ```c
                    struct MyType {
                        vec3 hit;
                        vec3 color;
                        vec2 uv;
                    };
                    ```
                    #### After
                    ```c
                    struct MyType {
                        vec3 hit, color;
                        vec2 uv;
                    };
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Join variable declarations and assignments" IsChecked="{Binding CustomOptions.JoinVariableDeclarationsWithAssignments}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Join Variable Declarations and Assignments
                    Join variable declarations with their corresponding assignments, removing the need for the variable name to be specified twice.

                    #### Before
                    ```c
                    float myFunc() {
                        float result; // This will move.
                        float b = 1.0;
                        result = b * 3.141;
                        return result;
                    }
                    ```
                    #### After
                    ```c
                    float myFunc() {
                        float b = 1.0;
                        float result = b * 3.141;
                        return result;
                    }
                    ```
                    **Note:** Fully simplified this would become...
                    ```c
                    float myFunc() { return 3.141; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Detect new constants" IsChecked="{Binding CustomOptions.DetectConstants}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Detect New Constants
                    Find any variables assigned a value that can be made `const`.

                    **Note:** These can become candidates for inlining into the code, when used with other options.

                    #### Before
                    ```c
                    float myFunc() {
                        float PI = 3.141;
                        return 2.0 * PI;
                    }
                    ```
                    #### After
                    ```c
                    float myFunc() {
                        const float PI = 3.141;
                        return 2.0 * PI;
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Inline constant variables" IsChecked="{Binding CustomOptions.InlineConstantVariables}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Inline Constant Variables
                    Remove a `const` variable by inlining it in all the places it is used.

                    **Note:** This will only be performed if it will result in shorter code.

                    #### Before
                    ```c
                    const float MAX_DIST = 128.0;

                    bool isVisible(float dist) { return dist &lt;= MAX_DIST; }
                    ```
                    #### After
                    ```c
                    bool isVisible(float dist) { return dist &lt;= 128.0; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Inline constant #defines" IsChecked="{Binding CustomOptions.InlineDefines}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Inline Constant #defines
                    Remove a `#define` by inlining its (constant) value in all the places it is used.

                    **Note:** This will only be performed if it will result in shorter code.

                    #### Before
                    ```c
                    #define MAX_DIST 128.0

                    bool isVisible(float dist) { return dist &lt;= MAX_DIST; }
                    ```
                    #### After
                    ```c
                    bool isVisible(float dist) { return dist &lt;= 128.0; }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>
    </StackPanel>

    <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" Margin="16,0">
        <Separator Width="3" Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" />
    </StackPanel>

    <StackPanel Grid.Row="0" Grid.Column="2">
        <CheckBox Content="Simplify float number format" IsChecked="{Binding CustomOptions.SimplifyNumberFormat}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Simplify Number Format
                    Performs a variety of formatting changes to represent numbers using less characters.
                    #### Before
                    ```c
                    float a = 1.200;
                    float b = 001.00;
                    float c = 23.0f;
                    float d = float(1.2);
                    float e = float(12);
                    float f = 123000.0;
                    int   g = int(1.2);
                    int   h = int(23);
                    ```
                    #### After
                    ```c
                    float a = 1.2;
                    float b = 1.;
                    float c = 23.;
                    float d = 1.2;
                    float e = 12.;
                    float f = 123e3;
                    int   g = 1;
                    int   h = 23;
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Simplify vector construction" IsChecked="{Binding CustomOptions.SimplifyVectorConstructors}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Simplify Vector Construction
                    Simplify the construction of vector and matrix types.
                    #### Before
                    ```c
                    vec3 a = vec3(1.0, 2.0, 3.0);
                    vec2 b = vec2(4.0, 4.0);
                    vec3 c = a.xyz;
                    vec3 d = vec3(a);
                    ```
                    #### After
                    ```c
                    vec3 a = vec3(1, 2, 3);
                    vec2 b = vec2(4);
                    vec3 c = a;
                    vec3 d = a;
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Simplify vector references" IsChecked="{Binding CustomOptions.SimplifyVectorReferences}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Simplify Vector References
                    Simplify the construction of vector and matrix types.
                    #### Before
                    ```c
                    vec3 a = vec3(1, 2, 3);
                    vec2 b = vec2(a.x, a.y);
                    vec3 c = vec2(a.x, a.y, a.z, a.x);
                    vec3 d = vec3(other_vec3);
                    ```
                    #### After
                    ```c
                    vec3 a = vec3(1, 2, 3);
                    vec2 b = a.xy;
                    vec3 c = a.xyzx;
                    vec3 d = other_vec3;
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Simplify branching" IsChecked="{Binding CustomOptions.SimplifyBranching}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Simplify Code Branching
                    Simplify branches by removing the ```else``` keyword where possible.
                    #### Before
                    ```c
                    if (a == b)
                        return a;
                    else // &lt; Not required.
                        return a + b;
                    ```
                    #### After
                    ```c
                    if (a == b)
                        return a;
                    return a + b;
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Combine consecutive assignments" IsChecked="{Binding CustomOptions.CombineConsecutiveAssignments}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Combine Consecutive Assignments
                    Consecutive assignments of the same variable can often be inlined.
                    #### Before
                    ```c
                    float doMaths() {
                        float a = myFunc();
                        a = pow(a, 2.0);
                        a = a + 23.3;
                        return a;
                    }
                    ```
                    #### After
                    ```c
                    float doMaths() {
                        float a = pow(myFunc(), 2.0) + 23.3;
                        return a;
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Combine assignment with single use" IsChecked="{Binding CustomOptions.CombineAssignmentWithSingleUse}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Combine Assignment With Single Use
                    A variable assignment used on the next line can often be inlined, if that next line is an assignment or ```if``` condition.
                    #### Before
                    ```c
                    float doMaths() {
                        float a, b, c;
                        a = myFunc();
                        b = pow(a, 2.0);
                        c = b * 2.2;
                        return c;
                    }
                    ```
                    #### After
                    ```c
                    float doMaths() {
                        float c;
                        c = pow(myFunc(), 2.0) * 2.2;
                        return c;
                    }
                    ```
                    Also
                    #### Before
                    ```c
                    bool f() {
                        float a = getValue();
                        if (a > 2.)
                            return true;
                        return false;
                    }
                    ```
                    #### After
                    ```c
                    bool f() {
                        if (getValue() > 2.)
                            return true;
                        return false;
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Introduce +=, -=, /=, *=" IsChecked="{Binding CustomOptions.IntroduceMathOperators}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Introduce +=, -=, /=, *=
                    Make use of a combined math operator/assignment when possible.
                    #### Before
                    ```c
                    float doMaths() {
                        float a = 2.1;
                        a += 1.0;
                        a = a * 3.141;
                        return a;
                    }
                    ```
                    #### After
                    ```c
                    float doMaths() {
                        float a = 2.1;
                        a++;
                        a *= 3.141;
                        return a;
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Simplify mathematical expressions" IsChecked="{Binding CustomOptions.SimplifyArithmetic}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Simplify Mathematical Expressions
                    Reduce unnecessary round brackets when performing arithmetic.
                    #### Before
                    ```c
                    float doMaths() {
                        return (2.0 * (3.141)) * (1.1 + 2.2);
                    }
                    ```
                    #### After
                    ```c
                    float doMaths() {
                        return 2.0 * 3.141 * (1.1 + 2.2);
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Perform simple arithmetic" IsChecked="{Binding CustomOptions.PerformArithmetic}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Perform Simple Arithmetic
                    Pre-evaluate simple arithmetic.
                    E.g.
                    * Change ```a = b + -c``` to ```a = b - c```
                    * Change ```f * 1.0``` or ```f / 1.0``` to ```f```
                    * Change ```f + 0.0``` or ```f - 0.0``` to ```f```
                    * Remove ```f * 0.0``` (when safe).
                    * Change ```pow(3.0, 2.0)``` to ```9.0```
                    * Change ```float a = 1.2 / 2.3 * 4.5;``` to ```float a = 2.3478;```
                    * Change ```vec2 f = vec2(1.1, 2.2) + 3.3 * 4.4;``` to ```vec2 f = vec2(15.62, 16.72);```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Replace functions calls with result" IsChecked="{Binding CustomOptions.ReplaceFunctionCallsWithResult}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Replace Functions Calls With Result
                    If the result of a function call can be calculated, replace the call with the result. 
                    #### Before
                    ```c
                    float doMaths(float a, float b, float c) {
                        return a * b + a + sin(c);
                    }

                    float f() {
                        float result = doMaths(1.0, 2.0, 3.14159);
                    }
                    ```
                    #### After
                    ```c
                    float f() {
                        float result = 3.0;
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>

        <CheckBox Content="Move constant parameters to within called functions." IsChecked="{Binding CustomOptions.MoveConstantParametersIntoCalledFunctions}">
            <CheckBox.ToolTip>
                <MdXaml:MarkdownScrollViewer xml:space="preserve">
                    ### Move constant parameters to within called functions
                    If all calls to a function use the same constant parameter, attempt to remove the parameter from the call site and inline it into the called function.
                    #### Before
                    ```c
                    float doMaths(float a, float b) {
                        return a * b;
                    }

                    float f() {
                        // All calls pass '2.0' for parameter 'a'.
                        float result = doMaths(2.0, 3.0) + doMaths(2.0, 5.0);
                    }
                    ```
                    #### After
                    ```c
                    float doMaths(float b) {
                        return 2.0 * b;
                    }

                    float f() {
                        float result = doMaths(3.0) + doMaths(5.0);
                    }
                    ```
                </MdXaml:MarkdownScrollViewer>
            </CheckBox.ToolTip>
        </CheckBox>
    </StackPanel>

    <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal" Margin="0,16,0,0" VerticalAlignment="Center">
        <materialDesign:PackIcon Kind="InfoCircle" Width="16" Height="16" Foreground="{DynamicResource PrimaryHueLightBrush}"/>
        <TextBlock Text="See tooltips for more information" Margin="4,0" VerticalAlignment="Center"/>
    </StackPanel>

    <Button Grid.Row="1" Grid.Column="2" Content="APPLY" Command="{Binding OnCustomOptionsAcceptedCommand}" HorizontalAlignment="Right" Margin="0,16,0,0" Foreground="White"/>
</Grid>
